version: '3.7'

services:
    nginx:
        image: nginx:1.16.0
        ports:
            - "80:80"
            - "443:443"  
        volumes:
            - /home/bijay/docker-swarm-mode/server/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - /home/bijay/www:/var/www/html
            - /etc/letsencrypt:/etc/letsencrypt
        deploy:
            mode: replicated
            replicas: 2
            restart_policy:
                max_attempts: 5
            placement:
                constraints: [node.role == worker]
        networks:
            - docker_default 
    
    php:
        build: ./server
        image: php-ext:7-fpm
        volumes:
            - /home/bijay/docker-swarm-mode/server/php/php.ini:/usr/local/etc/php/conf.d/php.ini
            - /home/bijay/www:/var/www/html
        deploy:
            mode: replicated
            replicas: 2
            restart_policy:
                max_attempts: 5
            placement:
                constraints: [node.role == worker]
        networks:
            - docker_default 
                
    mysql:
        image: mysql:5.7     
        ports: 
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: EhxTp7k7UpWQ9x8
            MYSQL_DATABASE: pctech
            MYSQL_USER: bijay
            MYSQL_PASSWORD: 12345
        volumes:
            - /home/bijay/mysql/data:/var/lib/mysql
            - /home/bijay/mysql/dumps:/docker-entrypoint-initdb.d
        deploy:
            mode: replicated
            replicas: 1
            restart_policy:
                max_attempts: 5
            placement:
                constraints: [node.role == manager]
        networks:
            - docker_default 
            
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - "8000:80"
        environment:
            PMA_HOST: mysql
        deploy:
            mode: replicated    
            replicas: 1
            restart_policy:
                max_attempts: 5
            placement:
                constraints: [node.role == manager]
        networks:
            - docker_default 
            
networks:
    docker_default:
        external: true